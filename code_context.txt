// File: components/AddItemForm.js
import React, { useState } from "react";
import { TextField, Button, Box, CircularProgress } from "@mui/material";

const AddItemForm = ({ onAddItem, loading }) => {
  const [item, setItem] = useState({
    name: "",
    quantity: "",
    unit: "",
    expiryDate: ""
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setItem(prevItem => ({ ...prevItem, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onAddItem(item);
  };

  return (
    <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
      <TextField
        margin="normal"
        required
        fullWidth
        id="name"
        label="Item Name"
        name="name"
        autoFocus
        value={item.name}
        onChange={handleChange}
      />
      <TextField
        margin="normal"
        required
        fullWidth
        id="quantity"
        label="Quantity"
        name="quantity"
        type="number"
        value={item.quantity}
        onChange={handleChange}
      />
      <TextField
        margin="normal"
        required
        fullWidth
        id="unit"
        label="Unit"
        name="unit"
        value={item.unit}
        onChange={handleChange}
      />
      <TextField
        margin="normal"
        fullWidth
        id="expiryDate"
        label="Expiry Date"
        name="expiryDate"
        type="date"
        InputLabelProps={{
          shrink: true,
        }}
        value={item.expiryDate}
        onChange={handleChange}
      />
      <Button
        type="submit"
        fullWidth
        variant="contained"
        sx={{ mt: 3, mb: 2 }}
        disabled={loading}
      >
        {loading ? <CircularProgress size={24} /> : "Add Item"}
      </Button>
    </Box>
  );
};

export default AddItemForm;
// File: components/ImageUploader.js
import React, { useState } from 'react';
import { Button } from '@mui/material';

const ImageUploader = ({ onUpload }) => {
  const [image, setImage] = useState(null);

  const handleCapture = (e) => {
    const file = e.target.files[0];
    setImage(file);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!image) {
      alert("Please select an image to upload.");
      return;
    }
    onUpload(image);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="file"
        accept="image/*"
        style={{ display: 'none' }}
        id='capture-button'
        capture='environment'
        onChange={handleCapture}
      />
      <label htmlFor='capture-button'>
        <Button variant="contained" component="span">
          Capture Image
        </Button>
      </label>
      {image && (
        <Button type="submit" variant="contained" color="primary">
          Upload Image
        </Button>
      )}
    </form>
  );
};

export default ImageUploader;

// File: components/PantryItem.js
import React from "react";
import { Card, CardContent, Typography } from "@mui/material";

const PantryItem = ({ item }) => {
  return (
    <Card>
      <CardContent>
        <Typography variant="h5">{item.name}</Typography>
        <Typography>Quantity: {item.quantity}</Typography>
        <Typography>Expiry Date: {item.expiryDate}</Typography>
      </CardContent>
    </Card>
  );
};

export default PantryItem;
// File: components/PantryList.js
import React from "react";
import PantryItem from './PantryItem';

const PantryList = ({ items }) => {
  return (
		<div>
			{items.map(item => (
				<PantryItem key={item.itemId || index} item={item} />
			))}
		</div>
	);
};

export default PantryList;
// File: components/RecipeDetails.js
import React from 'react';
import { Typography, Grid, Paper, Box } from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import PrintIcon from '@mui/icons-material/Print';
import StarBorderIcon from '@mui/icons-material/StarBorder';
import ShareIcon from '@mui/icons-material/Share';
import Image from 'next/image';

const RecipeDetail = ({ recipe }) => {
  return (
    <Paper elevation={3} sx={{ p: 3 }}>
      <Grid container spacing={3}>
        <Grid item xs={12} md={8}>
          <Typography variant="h4" gutterBottom>
            {recipe.name}
          </Typography>
          <Typography variant="subtitle1" gutterBottom>
            Source: {recipe.source}
          </Typography>
          <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
            <EditIcon />
            <PrintIcon />
            <StarBorderIcon />
            <ShareIcon />
          </Box>
          <Typography variant="h6" gutterBottom>
            Ingredients
          </Typography>
          <ul>
            {recipe.ingredients.map((ingredient, index) => (
              <li key={index}>{ingredient}</li>
            ))}
          </ul>
          <Typography variant="h6" gutterBottom>
            Instructions
          </Typography>
          <ol>
            {recipe.instructions.map((instruction, index) => (
              <li key={index}>{instruction}</li>
            ))}
          </ol>
        </Grid>
        <Grid item xs={12} md={4}>
          <Box sx={{ mb: 2 }}>
            <Typography variant="body1">Prep: {recipe.prepTime} mins</Typography>
            <Typography variant="body1">Cook: {recipe.cookTime} mins</Typography>
            <Typography variant="body1">Ready: {recipe.readyTime} mins</Typography>
            <Typography variant="body1">Servings: {recipe.servings}</Typography>
          </Box>
          <Image src={recipe.image} alt={recipe.name} style={{ width: '100%', borderRadius: '8px' }} />
          <Typography variant="body2" sx={{ mt: 1 }}>
            {recipe.photoCount} Photos
          </Typography>
        </Grid>
      </Grid>
    </Paper>
  );
};

export default RecipeDetail;
// File: components/RecipeSuggestions.js
import React from "react";
import { List, ListItem, ListItemText } from "@mui/material";

const RecipeSuggestions = ({ recipes }) => {
  return (
    <List>
      {recipes.map((recipe, index) => (
        <ListItem key={index}>
          <ListItemText
            primary={recipe.name}
            secondary={recipe.ingredients.join(", ")}
          />
        </ListItem>
      ))}
    </List>
  );
};

export default RecipeSuggestions;
// File: components/RemoveItemForm.js
import React, { useState } from "react";
import { TextField, Button } from "@mui/material";


const RemoveItemForm = ({ handleRemoveItem }) => {
  const [itemId, setItemId] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    handleRemoveItem(e, itemId);
    setItemId('');
  };

  return (
    <form onSubmit={handleSubmit}>
      <TextField
        label="Item Name"
        value={itemId}
        onChange={(e) => setItemId(e.target.value)}
      />
      <Button type="submit" variant="contained" color="secondary">
        Remove Item
      </Button>
    </form>
  );
};

export default RemoveItemForm;
// File: components/UpdateItemForm.js
import React, { useState, useEffect } from "react";
import { TextField, Button, Box, CircularProgress } from "@mui/material";

const UpdateItemForm = ({ item, onUpdateItem, loading }) => {
  const [updatedItem, setUpdatedItem] = useState({
    name: "",
    quantity: "",
    unit: "",
    expiryDate: ""
  });

  useEffect(() => {
    if (item) {
      setUpdatedItem(item);
    }
  }, [item]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setUpdatedItem(prevItem => ({ ...prevItem, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onUpdateItem(updatedItem.id, updatedItem);
  };

  if (!item) {
    return <p>No item to update</p>;
  }

  return (
    <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
      <TextField
        margin="normal"
        required
        fullWidth
        id="name"
        label="Item Name"
        name="name"
        autoFocus
        value={updatedItem.name}
        onChange={handleChange}
      />
      <TextField
        margin="normal"
        required
        fullWidth
        id="quantity"
        label="Quantity"
        name="quantity"
        type="number"
        value={updatedItem.quantity}
        onChange={handleChange}
      />
      <TextField
        margin="normal"
        required
        fullWidth
        id="unit"
        label="Unit"
        name="unit"
        value={updatedItem.unit}
        onChange={handleChange}
      />
      <TextField
        margin="normal"
        fullWidth
        id="expiryDate"
        label="Expiry Date"
        name="expiryDate"
        type="date"
        InputLabelProps={{
          shrink: true,
        }}
        value={updatedItem.expiryDate}
        onChange={handleChange}
      />
      <Button
        type="submit"
        fullWidth
        variant="contained"
        sx={{ mt: 3, mb: 2 }}
        disabled={loading}
      >
        {loading ? <CircularProgress size={24} /> : "Update Item"}
      </Button>
    </Box>
  );
};

export default UpdateItemForm;
// File: app/add-item/page.js
'use client';

import { useState } from "react";
import { useRouter } from "next/navigation";
import { addPantryItem } from "@/lib/pantryService";
import AddItemForm from "@/components/AddItemForm";


/* ADD PANTRY ITEM */
export default function AddItem() {
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  async function handleAddItem(item) {
    setLoading(true);
    try {
      await addPantryItem(item);
      router.push("/pantry");
      setMessage("Item added successfully!");
    } catch (e) {
      setMessage("Error adding item. Please try again.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div>
      <h1>Add New Item</h1>
      <AddItemForm onAddItem={handleAddItem} loading={loading} />
      {message && <p>{message}</p>}
    </div>
  );
}
// File: app/image-upload/page.js
'use client';

import { useState } from 'react';
import { classifyImage } from '../../lib/imageClassifications';
import { addPantryItem } from '../../lib/pantryService';
import ImageUploader from '../../components/ImageUploader';

export default function ImageUpload() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [classification, setClassification] = useState(null);
  const [itemAdded, setItemAdded] = useState(false);

  const handleUpload = async (imageFile) => {
    setLoading(true);
    setError(null);
    setClassification(null);
    setItemAdded(false);

    try {
      // Convert the file to base64
      const base64Image = await fileToBase64(imageFile);

      // Classify the image
      const result = await classifyImage(base64Image);

      // Log the result for debugging
      console.log("Classification result:", result);

      // Get the top classification
      const topClass = result[0];

      setClassification(topClass);
    } catch (err) {
      setError('Error classifying image');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleAddToPantry = async () => {
    if (!classification) return;

    try {
      await addPantryItem({
        name: classification.label,
        quantity: 1,
        unit: 'piece',
      });
      setItemAdded(true);
    } catch (err) {
      setError('Error adding item to pantry');
      console.error(err);
    }
  };

  return (
    <div>
      <h1>Upload and Classify Item</h1>
      <ImageUploader onUpload={handleUpload} />

      {loading && <p>Classifying image...</p>}

      {error && <p style={{ color: 'red' }}>{error}</p>}

      {classification && (
        <div>
          <h2>Classification Result:</h2>
          <p>Item: {classification.label}</p>
          <p>Confidence: {(classification.score * 100).toFixed(2)}%</p>
          <button onClick={handleAddToPantry}>Add to Pantry</button>
        </div>
      )}

      {itemAdded && <p style={{ color: 'green' }}>Item added to pantry successfully!</p>}
    </div>
  );
}

// Helper function to convert a file to base64
function fileToBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result.split(',')[1]);
    reader.onerror = error => reject(error);
  });
}

// File: app/layout.js
import { Inter } from "next/font/google";
import Link from "next/link";
import "../styles/globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Pantry Management App",
  description: "Keep track of your pantry items",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <div className="layout">
          <nav className="sidebar">
            <ul>
              <li>
                <Link href="/">Home</Link>
              </li>
              <li>
                <Link href="/pantry">Pantry</Link>
              </li>
              <li>
                <Link href="/add-item">Add Item</Link>
              </li>
              <li>
                <Link href="/image-upload">Image Upload</Link>
              </li>
              <li>
                <Link href="/recipes">Recipes</Link>
              </li>
            </ul>
          </nav>
          <main className="content">
            <header>
              <h1>{metadata.title}</h1>
              <p>{metadata.description}</p>
            </header>
            {children}
          </main>
        </div>
        <footer>
          <p>&copy; Panrty App</p>
        </footer>
      </body>
    </html>
  );
}
// File: app/page.js
import Link from "next/link";


export default function Home() {
  return (
    <div>
      <h1>Welcome to the Pantry</h1>
      <nav>
        <ul>
          <li>
            <Link href="/pantry">
              View Pantry
            </Link>
          </li>
          <li>
            <Link href="/add-item">
              Add Item
            </Link>
          </li>
          <li>
            <Link href="/remove-item">
              Remove Item
            </Link>
          </li>
          <li>
            <Link href="/update-item">
              Update Item
            </Link>
          </li>
        </ul>
      </nav>
    </div>
  );
}
// File: app/pantry/[id]/page.js
'use client';

import { useState, useEffect } from "react";
import { doc, getDoc } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { updatePantryItem, deletePantryItem } from "@/lib/pantryService";
import { useRouter } from "next/navigation";

export default function PantryItem({ params }) {
  const [item, setItem] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [editedItem, setEditedItem] = useState(null);
  const router = useRouter();

  useEffect(() => {
    async function fetchItem() {
      try {
        const docRef = doc(db, "pantry", params.id);
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
          const itemData = { itemId: docSnap.id, ...docSnap.data() };
          setItem(itemData);
          setEditedItem(itemData);
        } else {
          setError("Item not found");
        }
      } catch (e) {
        setError("Error fetching item. Please try again.");
      } finally {
        setLoading(false);
      }
    }
    fetchItem();
  }, [params.id]);

  const handleEdit = () => {
    setEditMode(true);
  };

  const handleCancel = () => {
    setEditMode(false);
    setEditedItem(item);
  };

  const handleSave = async () => {
    try {
      await updatePantryItem(item.id, editedItem);
      setItem(editedItem);
      setEditMode(false);
    } catch (e) {
      setError("Error updating item. Please try again.");
      console.error(e);
    }
  };

  const handleDelete = async () => {
    if (window.confirm("Are you sure you want to delete this item?")) {
      try {
        await deletePantryItem(item.id);
        router.push("/pantry");
      } catch (e) {
        setError("Error deleting item. Please try again.");
        console.error(e);
      }
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditedItem({ ...editedItem, [name]: value });
  };

  if (loading) {
    return <p>Loading...</p>;
  }
  if (error) {
    return <p>{error}</p>;
  }
  if (!item) {
    return <p>Item not found</p>;
  }

  return (
    <div>
      <h1>Pantry Item Details</h1>
      {editMode ? (
        <form onSubmit={(e) => { e.preventDefault(); handleSave(); }}>
          <div>
            <label htmlFor="name">Name:</label>
            <input
              type="text"
              id="name"
              name="name"
              value={editedItem.name}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label htmlFor="quantity">Quantity:</label>
            <input
              type="number"
              id="quantity"
              name="quantity"
              value={editedItem.quantity}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label htmlFor="unit">Unit:</label>
            <input
              type="text"
              id="unit"
              name="unit"
              value={editedItem.unit}
              onChange={handleChange}
              required
            />
          </div>
          <div>
            <label htmlFor="expiryDate">Expiry Date:</label>
            <input
              type="date"
              id="expiryDate"
              name="expiryDate"
              value={editedItem.expiryDate}
              onChange={handleChange}
            />
          </div>
          <button type="submit">Save</button>
          <button type="button" onClick={handleCancel}>Cancel</button>
        </form>
      ) : (
        <div>
          <p><strong>Name:</strong> {item.name}</p>
          <p><strong>Quantity:</strong> {item.quantity} {item.unit}</p>
          {item.expiryDate && (
            <p><strong>Expiry Date:</strong> {new Date(item.expiryDate).toLocaleDateString()}</p>
          )}
          <button onClick={handleEdit}>Edit</button>
          <button onClick={handleDelete}>Delete</button>
        </div>
      )}
    </div>
  );
}
// File: app/pantry/page.js
import { getPantryItems } from "@/lib/pantryService";
import PantryList from "@/components/PantryList";

/* GET PANTRY ITEMS */
export default async function Pantry() {
  const items = await getPantryItems();

  return (
    <div>
      <h1>My Pantry</h1>
      <PantryList items={items} />
    </div>
  );
}
// File: app/recipes/page.js
'use client';

import { useState, useEffect } from "react";
import { getPantryItems } from "@/lib/pantryService";
import { getRecipeSuggestion } from "@/lib/openAI";
import RecipeDetail from "@/components/RecipeDetail";
import { Typography, Box, CircularProgress } from "@mui/material";

export default function Recipes() {
  const [pantryItems, setPantryItems] = useState([]);
  const [recipe, setRecipe] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    async function fetchPantryItemsAndRecipe() {
      try {
        const items = await getPantryItems();
        setPantryItems(items);

        const itemNames = items.map((item) => item.name);
        const suggestions = await getRecipeSuggestion(itemNames);
        setRecipe(suggestions[0]); // Assuming getRecipeSuggestion returns an array of recipes
      } catch (e) {
        setError("Error fetching data. Please try again.");
        console.error(e);
      } finally {
        setLoading(false);
      }
    }
    fetchPantryItemsAndRecipe();
  }, []);

  if (loading) {
    return <CircularProgress />;
  }
  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  return (
    <Box sx={{ maxWidth: 1200, margin: 'auto', p: 2 }}>
      <Typography variant="h4" gutterBottom>
        Recipe Suggestion
      </Typography>
      {recipe ? (
        <RecipeDetail recipe={recipe} />
      ) : (
        <Typography>
          No recipe suggestions available. Try adding more items to your pantry.
        </Typography>
      )}
    </Box>
  );
}
// File: app/remove-item/page.js
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { deletePantryItem } from "@/lib/pantryService";
import RemoveItemForm from "@/components/RemoveItemForm";

export default function RemoveItem() {
  const [message, setMessage] = useState("");
  const router = useRouter();

  const handleRemoveItem = async (e, itemId) => {
    e.preventDefault();
    try {
      await deletePantryItem(itemId);
      router.push("/pantry");
      setMessage("Item removed successfully");
    } catch (e) {
      setMessage("Error removing item. Please try again.");
    }
  };

  return (
    <div>
      <h2>Remove Item</h2>
      <RemoveItemForm handleRemoveItem={handleRemoveItem} />
      {message && <p>{message}</p>}
    </div>
  );
}
// File: app/update-item/page.js
'use client';

import { useState } from "react";
import { updatePantryItem } from "@/lib/pantryService";
import UpdateItemForm from "@/components/UpdateItemForm";

/* UPDATE ITEM */
export default function UpdateItem() {
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);

  async function handleUpdateItem(itemId, newData) {
    setLoading(true);
    try {
      await updatePantryItem(item, newData);
      setMessage("Item updated successfully!");
    } catch (e) {
      setMessage("Error updating item. Please try again.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div>
      <h2>Update Item</h2>
      <UpdateItemForm onUpdateItem={handleUpdateItem} loading={loading} />
      {message && <p>{message}</p>}
    </div>
  );
}
// File: styles/globals.css
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

.layout {
  display: flex;
  min-height: 100vh;
}

.sidebar {
  width: 200px;
  background-color: #f0f0f0;
  padding: 20px;
}

.sidebar ul {
  list-style-type: none;
}

.sidebar li {
  margin-bottom: 10px;
}

.content {
  flex-grow: 1;
  padding: 20px;
}

header {
  margin-bottom: 20px;
}

footer {
  text-align: center;
  padding: 10px;
  background-color: #f0f0f0;
}

body {
  background-color: #f5f5f5;
}

.MuiPaper-root {
  background-color: #ffffff;
}

.MuiTypography-h4 {
  color: #ff6600;
}

.MuiTypography-subtitle1 {
  color: #666666;
}

ul, ol {
  padding-left: 20px;
}

li {
  margin-bottom: 8px;
}
